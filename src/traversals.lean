import algebraic_topology.simplicial_set
import tactic.norm_fin
import contravariant_functor
import category_theory.limits.has_limits
import category_theory.functor_category

open category_theory
open category_theory.limits
open simplex_category
open sSet
open_locale simplicial

-- Maybe put these somewhere else

namespace simplex_category

def last (n : simplex_category) := fin.last n.len

end simplex_category

/-- Interpret a simplex as a morphism from a standard simplicial set. -/
def simplex_as_hom {n : ‚Ñï} {X : sSet} (x : X.obj (opposite.op [n])) :
  Œî[n] ‚ü∂ X :=
{ app := Œª m f,
  begin
    change m.unop ‚ü∂ [n] at f,
    exact X.map f.op x,
  end,
  naturality' := Œª k m f,
  begin
    ext1 g, change k.unop ‚ü∂ [n] at g, simp,
    rw [‚Üêtypes_comp_apply (X.map g.op) (X.map f), ‚ÜêX.map_comp],
    apply congr_fun,
    apply congr_arg,
    refl,
  end
}

/-- Interpret a morphism in the simplex category as a morphism between standard simplicial sets. -/
def to_sSet_hom {n m} (f : [n] ‚ü∂ [m]) : Œî[n] ‚ü∂ Œî[m] := sSet.standard_simplex.map f

namespace traversal

inductive pm
| plus  : pm
| minus : pm

notation `¬±` := pm
notation `‚àî` := pm.plus
notation `‚à∏` := pm.minus

@[reducible]
def edge (n : ‚Ñï) := fin (n+1) √ó ¬±

def edge.lt {n} : edge n ‚Üí edge n ‚Üí Prop
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚à∏‚ü© := i < j
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚àî‚ü© := true
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚à∏‚ü© := false
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚àî‚ü© := j < i

instance {n} : has_lt (edge n) := ‚ü®edge.lt‚ü©

instance edge.has_decidable_lt {n} : Œ† e‚ÇÅ e‚ÇÇ : edge n, decidable (e‚ÇÅ < e‚ÇÇ)
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚à∏‚ü© := fin.decidable_lt i j
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚àî‚ü© := is_true trivial
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚à∏‚ü© := is_false not_false
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚àî‚ü© := fin.decidable_lt j i

lemma edge.lt_asymm {n} : Œ† e‚ÇÅ e‚ÇÇ : edge n, e‚ÇÅ < e‚ÇÇ ‚Üí e‚ÇÇ < e‚ÇÅ ‚Üí false
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚à∏‚ü© := nat.lt_asymm
| ‚ü®i, ‚à∏‚ü© ‚ü®j, ‚àî‚ü© := Œª h‚ÇÅ h‚ÇÇ, h‚ÇÇ
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚à∏‚ü© := Œª h‚ÇÅ h‚ÇÇ, h‚ÇÅ
| ‚ü®i, ‚àî‚ü© ‚ü®j, ‚àî‚ü© := nat.lt_asymm

instance {n} : is_asymm (edge n) edge.lt := ‚ü®edge.lt_asymm‚ü©

end traversal

@[reducible]
def traversal (n : ‚Ñï) := list (traversal.edge n)

def pointed_traversal (n : ‚Ñï) := traversal n √ó traversal n

namespace traversal

notation h :: t  := list.cons h t
notation `‚ü¶` l:(foldr `, ` (h t, list.cons h t) list.nil `‚üß`) := l

theorem eq_of_sorted_of_same_elem {n : ‚Ñï} : Œ† (Œ∏‚ÇÅ Œ∏‚ÇÇ : traversal n) (s‚ÇÅ : list.sorted edge.lt Œ∏‚ÇÅ) (s‚ÇÇ : list.sorted edge.lt Œ∏‚ÇÇ),
  (Œ† e, e ‚àà Œ∏‚ÇÅ ‚Üî e ‚àà Œ∏‚ÇÇ) ‚Üí Œ∏‚ÇÅ = Œ∏‚ÇÇ
| ‚ü¶‚üß         ‚ü¶‚üß         := Œª _ _ _, rfl
| ‚ü¶‚üß         (e‚ÇÇ :: t‚ÇÇ) := Œª _ _ H, begin specialize H e‚ÇÇ, simp at H, exfalso, exact H, end
| (e‚ÇÅ :: t‚ÇÅ) ‚ü¶‚üß         := Œª _ _ H, begin specialize H e‚ÇÅ, simp at H, exfalso, exact H, end
| (e‚ÇÅ :: t‚ÇÅ) (e‚ÇÇ :: t‚ÇÇ) := Œª s‚ÇÅ s‚ÇÇ H,
begin
  simp only [list.sorted_cons] at s‚ÇÅ s‚ÇÇ,
  cases s‚ÇÅ with he‚ÇÅ ht‚ÇÅ,
  cases s‚ÇÇ with he‚ÇÇ ht‚ÇÇ,
  have he‚ÇÅe‚ÇÇ : e‚ÇÅ = e‚ÇÇ,
  { have He‚ÇÅ := H e‚ÇÅ, simp at He‚ÇÅ, cases He‚ÇÅ with heq He‚ÇÅ, from heq,
    have He‚ÇÇ := H e‚ÇÇ, simp at He‚ÇÇ, cases He‚ÇÇ with heq He‚ÇÇ, from heq.symm,
    exfalso, exact edge.lt_asymm e‚ÇÅ e‚ÇÇ (he‚ÇÅ e‚ÇÇ He‚ÇÇ) (he‚ÇÇ e‚ÇÅ He‚ÇÅ), },
  cases he‚ÇÅe‚ÇÇ, simp,
  { apply eq_of_sorted_of_same_elem t‚ÇÅ t‚ÇÇ ht‚ÇÅ ht‚ÇÇ,
    intro e, specialize H e, simp at H, split,
    { intro he,
      cases H.1 (or.intro_right _ he) with h, cases h,
      exfalso, exact edge.lt_asymm e‚ÇÅ e‚ÇÅ (he‚ÇÅ e‚ÇÅ he) (he‚ÇÅ e‚ÇÅ he),
      exact h, },
    { intro he,
      cases H.2 (or.intro_right _ he) with h, cases h,
      exfalso, exact edge.lt_asymm e‚ÇÅ e‚ÇÅ (he‚ÇÇ e‚ÇÅ he) (he‚ÇÇ e‚ÇÅ he),
      exact h, }}
end

-- theorem eq_of_same_elem' {n : ‚Ñï} : Œ† (Œ∏‚ÇÅ Œ∏‚ÇÇ : traversal n) (s‚ÇÅ : list.sorted (edge.has_lt.lt) Œ∏‚ÇÅ) (s‚ÇÇ : list.sorted edge.has_lt.lt Œ∏‚ÇÇ),
--   (Œ† e, e ‚àà Œ∏‚ÇÅ ‚Üî e ‚àà Œ∏‚ÇÇ) ‚Üí Œ∏‚ÇÅ = Œ∏‚ÇÇ := Œª Œ∏‚ÇÅ Œ∏‚ÇÇ s‚ÇÅ s‚ÇÇ H, begin library_search end

theorem append_sorted {n : ‚Ñï} : Œ† (Œ∏‚ÇÅ Œ∏‚ÇÇ : traversal n) (s‚ÇÅ : list.sorted edge.lt Œ∏‚ÇÅ) (s‚ÇÇ : list.sorted edge.lt Œ∏‚ÇÇ),
  (Œ† e‚ÇÅ e‚ÇÇ, e‚ÇÅ ‚àà Œ∏‚ÇÅ ‚Üí e‚ÇÇ ‚àà Œ∏‚ÇÇ ‚Üí e‚ÇÅ < e‚ÇÇ) ‚Üí list.sorted edge.lt (Œ∏‚ÇÅ ++ Œ∏‚ÇÇ)
| ‚ü¶‚üß         Œ∏‚ÇÇ := Œª _ s‚ÇÇ _, s‚ÇÇ
| (e‚ÇÅ :: t‚ÇÅ) Œ∏‚ÇÇ := Œª s‚ÇÅ s‚ÇÇ H,
begin
  rw list.sorted_cons at s‚ÇÅ,
  cases s‚ÇÅ with he‚ÇÅ ht‚ÇÅ,
  dsimp, rw list.sorted_cons,
  split,
  { intros e he, simp at he, cases he,
    exact he‚ÇÅ e he,
    refine H e‚ÇÅ e (list.mem_cons_self e‚ÇÅ t‚ÇÅ) he },
  { apply append_sorted t‚ÇÅ Œ∏‚ÇÇ ht‚ÇÅ s‚ÇÇ,
    intros e‚ÇÅ' e‚ÇÇ' he‚ÇÅ' he‚ÇÇ',
    refine H e‚ÇÅ' e‚ÇÇ' (list.mem_cons_of_mem e‚ÇÅ he‚ÇÅ') he‚ÇÇ' }
end

def apply_map_to_plus {n m : simplex_category} (i : fin (n.len+1)) (Œ± : m ‚ü∂ n) :
  Œ† (j : ‚Ñï), j < m.len+1 ‚Üí traversal m.len
| 0       h0  := if Œ±.to_preorder_hom 0 = i then ‚ü¶‚ü®0, ‚àî‚ü©‚üß else ‚ü¶‚üß
| (j + 1) hj  :=
  if Œ±.to_preorder_hom ‚ü®j+1,hj‚ü© = i
  then ‚ü®‚ü®j+1,hj‚ü©, ‚àî‚ü© :: (apply_map_to_plus j (nat.lt_of_succ_lt hj))
  else apply_map_to_plus j (nat.lt_of_succ_lt hj)

lemma min_notin_apply_map_to_plus {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚à∏) ‚àâ apply_map_to_plus i Œ± j hj :=
begin
  intros k hk,
  induction j with j,
  { simp [apply_map_to_plus] at hk,
    split_ifs at hk; simp at hk; exact hk },
  { simp [apply_map_to_plus] at hk,
    split_ifs at hk, simp at hk,
    repeat {exact j_ih _ hk }}
end

lemma plus_in_apply_map_to_plus_iff' {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚àî) ‚àà apply_map_to_plus i Œ± j hj ‚Üî k.val ‚â§ j ‚àß Œ±.to_preorder_hom k = i :=
begin
  intros k,
  induction j with j,
  { simp only [apply_map_to_plus], split_ifs; simp, split,
    intro hk, cases hk, simp, exact h,
    intro hk, ext, exact hk.1,
    intro hk, replace hk : k = 0, ext, exact hk, cases hk, exact h, },
  { simp only [apply_map_to_plus], split_ifs; simp; rw j_ih; simp,
    split, intro hk, cases hk, cases hk, split, simp, exact h,
    split, exact nat.le_succ_of_le hk.1, exact hk.2,
    intro hk, rw hk.2, simp, cases nat.of_le_succ hk.1, right, exact h_1, left, ext, simp, exact h_1,
    intro hk, split, intro hkj, exact nat.le_succ_of_le hkj,
    intro hkj, cases nat.of_le_succ hkj, exact h_1,
    exfalso, have H : k = ‚ü®j + 1, hj‚ü©, ext, exact h_1, cases H, exact h hk, }
end

lemma plus_in_apply_map_to_plus_iff {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚àî) ‚àà apply_map_to_plus i Œ± m.len (nat.lt_succ_self m.len) ‚Üî Œ±.to_preorder_hom k = i :=
begin
  intros k,
  rw [plus_in_apply_map_to_plus_iff', ‚Üênat.lt_succ_iff],
  simp, exact Œª h, k.2,
end

lemma apply_map_to_plus_sorted {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  list.sorted edge.lt (apply_map_to_plus i Œ± j hj) :=
begin
  induction j with j,
  { simp [apply_map_to_plus],
    split_ifs; simp, },
  { simp [apply_map_to_plus],
    split_ifs, swap, exact j_ih (nat.lt_of_succ_lt hj),
    simp only [list.sorted_cons], split, swap, exact j_ih (nat.lt_of_succ_lt hj),
    intros e he, cases e with k, cases e_snd,
    rw plus_in_apply_map_to_plus_iff' at he,
    replace he : k.val ‚â§ j := he.1,
    rw ‚Üênat.lt_succ_iff at he, exact he,
    exact absurd he (min_notin_apply_map_to_plus Œ± i j _ k), },
end

lemma apply_id_to_plus {n : simplex_category} (i : fin (n.len+1)) :
  apply_map_to_plus i (ùüô n) n.len (nat.lt_succ_self n.len) = ‚ü¶‚ü®i, ‚àî‚ü©‚üß :=
begin
  apply eq_of_sorted_of_same_elem,
  apply apply_map_to_plus_sorted,
  apply list.sorted_singleton,
  rintro ‚ü®i, b‚ü©, cases b,
  rw plus_in_apply_map_to_plus_iff, simp,
  simp, apply min_notin_apply_map_to_plus,
end


def apply_map_to_min {n m : simplex_category} (i : fin (n.len+1)) (Œ± : m ‚ü∂ n) :
Œ† (j : ‚Ñï), j < m.len+1 ‚Üí traversal m.len
| 0       h0  := if Œ±.to_preorder_hom m.last = i then ‚ü¶‚ü®m.last, ‚à∏‚ü©‚üß else ‚ü¶‚üß
| (j + 1) hj  :=
  if Œ±.to_preorder_hom ‚ü®m.len-(j+1), nat.sub_lt_succ _ _‚ü© = i
  then ‚ü®‚ü®m.len-(j+1), nat.sub_lt_succ _ _‚ü©, ‚à∏‚ü© :: (apply_map_to_min j (nat.lt_of_succ_lt hj))
  else apply_map_to_min j (nat.lt_of_succ_lt hj)

lemma plus_notin_apply_map_to_min {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚àî) ‚àâ apply_map_to_min i Œ± j hj :=
begin
  intros k hk,
  induction j with j,
  { simp [apply_map_to_min] at hk,
    split_ifs at hk; simp at hk; exact hk },
  { simp [apply_map_to_min] at hk,
    split_ifs at hk, simp at hk,
    repeat {exact j_ih _ hk }}
end

lemma min_in_apply_map_to_min_iff' {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚à∏) ‚àà apply_map_to_min i Œ± j hj ‚Üî k.val ‚â• m.len - j ‚àß Œ±.to_preorder_hom k = i :=
begin
  intros k,
  induction j with j,
  { simp only [apply_map_to_min], split_ifs; simp, split,
    intro hk, cases hk, simp, split, refl, exact h,
    intro hk, ext, exact le_antisymm (fin.le_last k) hk.1,
    intro hk, replace hk : k = m.last, ext, exact le_antisymm (fin.le_last k) hk,
    cases hk, exact h, },
  {
    have Hk : ‚àÄ k, m.len - j.succ ‚â§ k ‚Üî m.len - j ‚â§ k ‚à® m.len - j.succ = k,
    { have hmj_pos : 0 < m.len - j, from nat.sub_pos_of_lt (nat.succ_lt_succ_iff.mp hj),
      rw nat.lt_succ_iff at hj, intro k,
      rw [nat.sub_succ, ‚Üênat.succ_le_succ_iff, ‚Üênat.succ_inj', nat.succ_pred_eq_of_pos hmj_pos],
      exact nat.le_add_one_iff, },
    simp only [apply_map_to_min], split_ifs; simp; rw j_ih; simp,
    split, intro hk, cases hk, cases hk, split, simp, exact h,
    split, rw nat.sub_succ, exact nat.le_trans (nat.pred_le _) hk.1, exact hk.2,
    intro hk, rw hk.2, simp, cases (Hk k).mp hk.1, right, exact h_1, left, ext, exact h_1.symm,
    intro hk, rw Hk k, split, intro hkj, left, exact hkj,
    intro hkj, cases hkj, exact hkj,
    have Hk' : k = ‚ü®m.len - (j + 1), apply_map_to_min._main._proof_1 _‚ü©, ext, exact hkj.symm,
    cases Hk', exact absurd hk h,}
end

lemma min_in_apply_map_to_min_iff {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) :
  ‚àÄ (k : fin (m.len + 1)), (k, ‚à∏) ‚àà apply_map_to_min i Œ± m.len (nat.lt_succ_self m.len) ‚Üî Œ±.to_preorder_hom k = i :=
begin
  intros k, rw [min_in_apply_map_to_min_iff'], simp,
end

lemma apply_map_to_min_sorted {n m : simplex_category} (Œ± : m ‚ü∂ n) (i : fin (n.len+1)) (j : ‚Ñï) (hj : j < m.len + 1) :
  list.sorted edge.lt (apply_map_to_min i Œ± j hj) :=
begin
  induction j with j,
  { simp [apply_map_to_min],
    split_ifs; simp, },
  { simp [apply_map_to_min],
    split_ifs, swap, exact j_ih (nat.lt_of_succ_lt hj),
    simp only [list.sorted_cons], split, swap, exact j_ih (nat.lt_of_succ_lt hj),
    intros e he, cases e with k, cases e_snd,
    exact absurd he (plus_notin_apply_map_to_min Œ± i j _ k),
    rw min_in_apply_map_to_min_iff' at he,
    replace he : k.val ‚â• m.len - j := he.1,
    change m.len - (j + 1) < k.val,
    refine lt_of_lt_of_le _ he, rw nat.sub_succ,
    refine nat.pred_lt _, simp,
    rwa [nat.sub_eq_zero_iff_le, not_le, ‚Üênat.succ_lt_succ_iff], },
end

lemma apply_id_to_min {n : simplex_category} (i : fin (n.len+1)) :
  apply_map_to_min i (ùüô n) n.len (nat.lt_succ_self n.len) = ‚ü¶‚ü®i, ‚à∏‚ü©‚üß :=
begin
  apply eq_of_sorted_of_same_elem,
  apply apply_map_to_min_sorted,
  apply list.sorted_singleton,
  rintro ‚ü®i, b‚ü©, cases b,
  simp, apply plus_notin_apply_map_to_min,
  rw min_in_apply_map_to_min_iff, simp,
end

def apply_map {n m : simplex_category} (Œ± : m ‚ü∂ n) : traversal n.len ‚Üí traversal m.len
| ‚ü¶‚üß            := ‚ü¶‚üß
| (‚ü®i, ‚àî‚ü© :: t) := (apply_map_to_plus i Œ± m.len (nat.lt_succ_self m.len)) ++ apply_map t
| (‚ü®i, ‚à∏‚ü© :: t) := (apply_map_to_min i Œ± m.len (nat.lt_succ_self m.len)) ++ apply_map t

lemma plus_in_apply_map_iff {n m : simplex_category} (Œ± : m ‚ü∂ n) (Œ∏ : traversal n.len) :
  ‚àÄ k, (k, ‚àî) ‚àà apply_map Œ± Œ∏ ‚Üî (Œ±.to_preorder_hom k, ‚àî) ‚àà Œ∏ :=
begin
  intros k, induction Œ∏,
  { simp [apply_map], },
  cases Œ∏_hd with i, cases Œ∏_hd_snd; simp [apply_map]; rw Œ∏_ih,
  rw plus_in_apply_map_to_plus_iff,
  simp, intro hk, exfalso,
  exact plus_notin_apply_map_to_min Œ± _ _ _ _ hk,
end

lemma min_in_apply_map_iff {n m : simplex_category} (Œ± : m ‚ü∂ n) (Œ∏ : traversal n.len) :
  ‚àÄ k, (k, ‚à∏) ‚àà apply_map Œ± Œ∏ ‚Üî (Œ±.to_preorder_hom k, ‚à∏) ‚àà Œ∏ :=
begin
  intros k, induction Œ∏,
  { simp [apply_map], },
  cases Œ∏_hd with i, cases Œ∏_hd_snd; simp [apply_map]; rw Œ∏_ih,
  simp, intro hk, exfalso,
  exact min_notin_apply_map_to_plus Œ± _ _ _ _ hk,
  rw min_in_apply_map_to_min_iff,
end

def apply_map_preserves_sorted {n m : simplex_category} (Œ± : m ‚ü∂ n) (Œ∏ : traversal n.len) :
  list.sorted edge.lt Œ∏ ‚Üí list.sorted edge.lt (Œ∏.apply_map Œ±) :=
begin
  intro sŒ∏, induction Œ∏,
  { dsimp [apply_map], exact list.sorted_nil },
  specialize Œ∏_ih (list.sorted_of_sorted_cons sŒ∏),
  induction Œ∏_hd with j, induction Œ∏_hd_snd,
  { dsimp [apply_map],
    refine append_sorted _ _ (apply_map_to_plus_sorted Œ± j m.len _) Œ∏_ih _,
    rintros ‚ü®i‚ÇÅ, b‚ÇÅ‚ü© ‚ü®i‚ÇÇ, b‚ÇÇ‚ü© he‚ÇÅ he‚ÇÇ,
    cases b‚ÇÅ, rw plus_in_apply_map_to_plus_iff at he‚ÇÅ, cases he‚ÇÅ,
    replace sŒ∏ := list.rel_of_sorted_cons sŒ∏,
    cases b‚ÇÇ, rw plus_in_apply_map_iff at he‚ÇÇ,
    { change i‚ÇÇ < i‚ÇÅ,
      have hlt : Œ±.to_preorder_hom i‚ÇÇ < Œ±.to_preorder_hom i‚ÇÅ, from sŒ∏ _ he‚ÇÇ,
      exact not_le.mp (Œª h, not_le.mpr hlt (Œ±.to_preorder_hom.monotone h)), },
    { change false,
      rw min_in_apply_map_iff at he‚ÇÇ,
      exact sŒ∏ _ he‚ÇÇ },
    { exact absurd he‚ÇÅ (min_notin_apply_map_to_plus _ _ _ _ _) }},
  { dsimp [apply_map],
    refine append_sorted _ _ (apply_map_to_min_sorted Œ± j m.len _) Œ∏_ih _,
    rintros ‚ü®i‚ÇÅ, b‚ÇÅ‚ü© ‚ü®i‚ÇÇ, b‚ÇÇ‚ü© he‚ÇÅ he‚ÇÇ,
    cases b‚ÇÅ,
    { exact absurd he‚ÇÅ (plus_notin_apply_map_to_min _ _ _ _ _) },
    rw min_in_apply_map_to_min_iff at he‚ÇÅ, cases he‚ÇÅ,
    replace sŒ∏ := list.rel_of_sorted_cons sŒ∏,
    cases b‚ÇÇ,
    { trivial, },
    { rw min_in_apply_map_iff at he‚ÇÇ,
      change i‚ÇÅ < i‚ÇÇ,
      have hlt : Œ±.to_preorder_hom i‚ÇÅ < Œ±.to_preorder_hom i‚ÇÇ, from sŒ∏ _ he‚ÇÇ,
      exact not_le.mp (Œª h, not_le.mpr hlt (Œ±.to_preorder_hom.monotone h)), },}
end

@[simp]
lemma map_id {n : simplex_category} : apply_map (ùüô n) = ùüô (traversal n.len) :=
begin
  ext1 Œ∏, change apply_map (ùüô n) Œ∏ = Œ∏,
  induction Œ∏, refl, induction Œ∏_hd, induction Œ∏_hd_snd;
  unfold apply_map; rw Œ∏_ih,
  { have H : (Œ∏_hd_fst, ‚àî) :: Œ∏_tl = ‚ü¶(Œ∏_hd_fst, ‚àî)‚üß ++ Œ∏_tl, refl, rw H, clear H,
    rw list.append_left_inj,
    exact apply_id_to_plus Œ∏_hd_fst, },
  { have H : (Œ∏_hd_fst, ‚à∏) :: Œ∏_tl = ‚ü¶(Œ∏_hd_fst, ‚à∏)‚üß ++ Œ∏_tl, refl, rw H,
    rw list.append_left_inj,
    exact apply_id_to_min Œ∏_hd_fst, },
end

@[simp]
lemma apply_map_append {n m : simplex_category} (Œ± : m ‚ü∂ n) (Œ∏‚ÇÅ Œ∏‚ÇÇ : traversal n.len) :
  apply_map Œ± (Œ∏‚ÇÅ ++ Œ∏‚ÇÇ) = (apply_map Œ± Œ∏‚ÇÅ) ++ (apply_map Œ± Œ∏‚ÇÇ) :=
begin
  induction Œ∏‚ÇÅ, refl, induction Œ∏‚ÇÅ_hd, induction Œ∏‚ÇÅ_hd_snd,
  all_goals { simp, unfold apply_map, rw Œ∏‚ÇÅ_ih, simp },
end

@[simp]
lemma comp_apply {n m l : simplex_category} (Œ± : m ‚ü∂ n) (Œ≤ : n ‚ü∂ l) (Œ∏ : traversal l.len) :
  apply_map (Œ± ‚â´ Œ≤) Œ∏ = apply_map Œ± (apply_map Œ≤ Œ∏) :=
begin
  induction Œ∏, refl, induction Œ∏_hd with i, induction Œ∏_hd_snd,
  all_goals
  { unfold apply_map, rw [apply_map_append, ‚ÜêŒ∏_ih],
    apply (list.append_left_inj (apply_map (Œ± ‚â´ Œ≤) Œ∏_tl)).mpr,
    clear Œ∏_ih Œ∏_tl },
  { apply eq_of_sorted_of_same_elem _ _,
    apply apply_map_to_plus_sorted,
    apply apply_map_preserves_sorted,
    apply apply_map_to_plus_sorted,
    intro e, cases e with j, cases e_snd,
    { rw plus_in_apply_map_iff,
      rw [plus_in_apply_map_to_plus_iff, plus_in_apply_map_to_plus_iff],
      simp },
    { rw min_in_apply_map_iff,
      split; intro h; exfalso;
      exact min_notin_apply_map_to_plus _ _ _ _ _ h }},
  { apply eq_of_sorted_of_same_elem _ _,
    apply apply_map_to_min_sorted,
    apply apply_map_preserves_sorted,
    apply apply_map_to_min_sorted,
    intro e, cases e with j, cases e_snd,
    { rw plus_in_apply_map_iff,
      split; intro h; exfalso;
      exact plus_notin_apply_map_to_min _ _ _ _ _ h },
    { rw min_in_apply_map_iff,
      rw [min_in_apply_map_to_min_iff, min_in_apply_map_to_min_iff],
      simp }}
end

def ùïã‚ÇÄ : sSet :=
{ obj       := Œª n, traversal n.unop.len,
  map       := Œª x y Œ±, traversal.apply_map Œ±.unop,
  map_id'   := Œª n, traversal.map_id,
  map_comp' := Œª l n m Œ≤ Œ±, funext (Œª Œ∏, traversal.comp_apply Œ±.unop Œ≤.unop Œ∏) }

def ùïã‚ÇÅ : sSet :=
{ obj       := Œª x, pointed_traversal x.unop.len,
  map       := Œª _ _ Œ± Œ∏, ‚ü®ùïã‚ÇÄ.map Œ± Œ∏.1, ùïã‚ÇÄ.map Œ± Œ∏.2‚ü©,
  map_id'   := Œª _, by ext1 Œ∏; simp,
  map_comp' := Œª _ _ _ _ _, by ext1 Œ∏; simp }

def cod : ùïã‚ÇÅ ‚ü∂ ùïã‚ÇÄ :=
{ app         := Œª x Œ∏, list.append Œ∏.1 Œ∏.2,
  naturality' := Œª x y Œ±, funext (Œª Œ∏, (traversal.apply_map_append Œ±.unop Œ∏.1 Œ∏.2).symm) }

def dom : ùïã‚ÇÅ ‚ü∂ ùïã‚ÇÄ :=
{ app         := Œª n Œ∏, Œ∏.2,
  naturality' := Œª x y Œ±, by simp; refl }

def as_hom {n} (Œ∏ : traversal n) : Œî[n] ‚ü∂ ùïã‚ÇÄ := simplex_as_hom Œ∏

def add_point {n} : Œ† (Œ∏ : traversal n), fin(Œ∏.length + 1) ‚Üí pointed_traversal n
| ‚ü¶‚üß       j := ‚ü®‚ü¶‚üß, ‚ü¶‚üß‚ü©
| (h :: t) j := if j.val = 0 then ‚ü®‚ü¶‚üß, h :: t‚ü©
                else ‚ü®(add_point t (j-1)).1 ++ ‚ü¶h‚üß, (add_point t (j-1)).2‚ü©

end traversal

def pointed_traversal.as_hom {n} (Œ∏ : pointed_traversal n) : Œî[n] ‚ü∂ traversal.ùïã‚ÇÅ := simplex_as_hom Œ∏

namespace traversal

-- Geometric realisation of a traversal
namespace geometric_realization

variables {n : ‚Ñï} (Œ∏ : traversal n)

def s {n} : fin (n+1) √ó ¬± ‚Üí fin (n+2)
| ‚ü®k, ‚àî‚ü© := k.succ
| ‚ü®k, ‚à∏‚ü© := k.cast_succ

def t {n} : fin (n+1) √ó ¬± ‚Üí fin (n+2)
| ‚ü®k, ‚àî‚ü© := k.cast_succ
| ‚ü®k, ‚à∏‚ü© := k.succ

@[reducible]
def shape := fin(Œ∏.length + 1) ‚äï fin(Œ∏.length)

namespace shape

inductive hom :  shape Œ∏ ‚Üí shape Œ∏ ‚Üí Type*
| id (X)                 : hom X X
| s  (i : fin(Œ∏.length)) : hom (sum.inl i.cast_succ) (sum.inr i)
| t  (i : fin(Œ∏.length)) : hom (sum.inl i.succ)      (sum.inr i)

instance category : small_category (shape Œ∏) :=
{ hom := hom Œ∏,
  id := Œª j, hom.id j,
  comp := Œª j‚ÇÅ j‚ÇÇ j‚ÇÉ f g,
  begin
    cases f, exact g,
    cases g, exact hom.s f_1,
    cases g, exact hom.t f_1,
  end,
  id_comp' := Œª j‚ÇÅ j‚ÇÇ f, rfl,
  comp_id' := Œª j‚ÇÅ j‚ÇÇ f, by cases f; refl,
  assoc'   := Œª j‚ÇÅ j‚ÇÇ j‚ÇÉ j‚ÇÑ f g h,
  begin
    cases f, refl,
    cases g, refl,
    cases g, refl,
  end
}

end shape

def diagram : shape Œ∏ ‚•§ sSet :=
{ obj := Œª j, sum.cases_on j (Œª j, Œî[n]) (Œª j, Œî[n+1]),
  map := Œª X Y f,
  begin
    cases X; cases Y; cases f,
    exact ùüô _,
    exact to_sSet_hom (Œ¥ (s (list.nth_le Œ∏ Y.1 Y.2))),
    exact to_sSet_hom (Œ¥ (t (list.nth_le Œ∏ Y.1 Y.2))),
    exact ùüô _,
  end,
  map_id'   := Œª X, by cases X; refl,
  map_comp' := Œª X Y Z f g, by cases X; cases Y; cases Z; cases f; cases g; refl, }

-- @[simp]
-- lemma diagram_map_s {j} : (diagram Œ∏).map (shape.hom.s j) = _ := sorry

def colimit : colimit_cocone (diagram Œ∏) :=
{ cocone := combine_cocones (diagram Œ∏) (Œª n,
  { cocone := types.colimit_cocone _,
    is_colimit := types.colimit_cocone_is_colimit _ }),
  is_colimit := combined_is_colimit _ _,
}

end geometric_realization

def geometric_realization {n} (Œ∏ : traversal n) : sSet := (geometric_realization.colimit Œ∏).cocone.X

namespace geometric_realization

variables {n : ‚Ñï} (Œ∏ : traversal n)

def j_cocone : limits.cocone (diagram Œ∏) :=
{ X := Œî[n],
  Œπ :=
  { app := Œª j,
    begin
      cases j,
      exact ùüô _,
      exact to_sSet_hom (œÉ (list.nth_le Œ∏ j.1 j.2).1),
    end,
    naturality' := Œª j‚ÇÅ j‚ÇÇ f,
    begin
      cases j‚ÇÅ; cases j‚ÇÇ; cases f,
      refl, swap 3, refl,
      change standard_simplex.map (Œ¥ (s (list.nth_le Œ∏ j‚ÇÇ _))) ‚â´ standard_simplex.map (œÉ (list.nth_le Œ∏ j‚ÇÇ _).fst) = ùüô _,
      swap,
      change standard_simplex.map (Œ¥ (t (list.nth_le Œ∏ j‚ÇÇ _))) ‚â´ standard_simplex.map (œÉ (list.nth_le Œ∏ j‚ÇÇ _).fst) = ùüô _,
      all_goals { cases list.nth_le Œ∏ _ _, cases snd, },
      all_goals
      { rw [‚Üêstandard_simplex.map_comp, ‚Üêstandard_simplex.map_id],
        apply congr_arg, },
      exact Œ¥_comp_œÉ_self,
      exact Œ¥_comp_œÉ_succ,
      exact Œ¥_comp_œÉ_succ,
      exact Œ¥_comp_œÉ_self,
    end }
}

def j : geometric_realization Œ∏ ‚ü∂ Œî[n] :=
  (colimit Œ∏).is_colimit.desc (j_cocone Œ∏)

def k_cocone : cocone (diagram Œ∏) :=
{ X := ùïã‚ÇÅ,
  Œπ :=
  { app := Œª j,
    begin
      cases j,
      exact (Œ∏.add_point j).as_hom,
      --Special position
      exact (ùïã‚ÇÅ.map (œÉ (list.nth_le Œ∏ j.cast_succ.1 j.2).1).op (Œ∏.add_point j.cast_succ)).as_hom,
    end,
    naturality' := Œª j‚ÇÅ j‚ÇÇ f,
    begin
      cases j‚ÇÅ; cases j‚ÇÇ; cases f; simp,
      refl, swap 3, refl,
      { ext1, ext1, simp,
        sorry
      },
      { ext1,
        sorry
      },
    end }
}

def k : geometric_realization Œ∏ ‚ü∂ ùïã‚ÇÅ := (colimit Œ∏).is_colimit.desc (k_cocone Œ∏)

def pullback_cone {n} (Œ∏ : traversal n) : pullback_cone (Œ∏.as_hom) cod := pullback_cone.mk (j Œ∏) (k Œ∏)
begin
  sorry
end

-- is_limit_aux
lemma Theorem_9_11 : is_limit (pullback_cone Œ∏) :=
{ lift  := sorry,
  fac'  := sorry,
  uniq' := sorry }


end geometric_realization

end traversal
