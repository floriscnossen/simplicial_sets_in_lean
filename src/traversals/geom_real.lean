import traversals.basic

open category_theory
open category_theory.limits
open simplex_category
open sSet
open_locale simplicial

/-! # Geometric realisation of a traversal -/

namespace traversal

namespace geom_real

variables {n : ‚Ñï} (Œ∏ : traversal n)

@[reducible]
def shape := fin(Œ∏.length + 1) ‚äï fin(Œ∏.length)

namespace shape

inductive hom : shape Œ∏ ‚Üí shape Œ∏ ‚Üí Type*
| id (X)                 : hom X X
| s  (i : fin(Œ∏.length)) : hom (sum.inl i.cast_succ) (sum.inr i)
| t  (i : fin(Œ∏.length)) : hom (sum.inl i.succ)      (sum.inr i)

instance category : small_category (shape Œ∏) :=
{ hom := hom Œ∏,
  id := Œª j, hom.id j,
  comp := Œª j‚ÇÅ j‚ÇÇ j‚ÇÉ f g,
  begin
    cases f, exact g,
    cases g, exact hom.s f_1,
    cases g, exact hom.t f_1,
  end,
  id_comp' := Œª j‚ÇÅ j‚ÇÇ f, rfl,
  comp_id' := Œª j‚ÇÅ j‚ÇÇ f, by cases f; refl,
  assoc'   := Œª j‚ÇÅ j‚ÇÇ j‚ÇÉ j‚ÇÑ f g h,  by cases f; cases g; refl,
}

end shape

def diagram : shape Œ∏ ‚•§ sSet :=
{ obj := Œª j, sum.cases_on j (Œª j, Œî[n]) (Œª j, Œî[n+1]),
  map := Œª _ _ f,
  begin
    cases f with _ j j,
    exact ùüô _,
    exact to_sSet_hom (Œ¥ (list.nth_le Œ∏ j.1 j.2).s),
    exact to_sSet_hom (Œ¥ (list.nth_le Œ∏ j.1 j.2).t),
  end,
  map_id'   := Œª j, rfl,
  map_comp' := Œª _ _ _ f g, by cases f; cases g; refl, }

def colimit : colimit_cocone (diagram Œ∏) :=
{ cocone := combine_cocones (diagram Œ∏) (Œª n,
  { cocone := types.colimit_cocone _,
    is_colimit := types.colimit_cocone_is_colimit _ }),
  is_colimit := combined_is_colimit _ _,
}

end geom_real

def geom_real {n} (Œ∏ : traversal n) : sSet := (geom_real.colimit Œ∏).cocone.X

end traversal
